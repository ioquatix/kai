[terminal run!]

((lookup this 'Table 'new) 'name "Samuel" 'age 25)

((lambda '(object function) '(object)) "Arg1" "Arg2")

(lambda '(message) 

((lookup 'Table 'set) (this) 'call (lambda '(object function) '(
	(wrap (lookup object (head function)) (tail function))
)))

# Another alternative is to use '(lookup object (head function))
# This defers evaluation of the function lookup.
((lookup 'Table 'set) (this) 'with (lambda '(object function) '(block
	((cell
		(wrap (lookup object (head function)))
		(cell object (tail function))
	))
)))

(with (this) '(set 'x 10))

((lambda '(x y) '(x)) "Arg1" "Arg2")

(with 'this 'LOAD_PATHS (wrap 'prepend x))


(block
	(trace 10)
	(trace 20)
	(return 30 40)
	(trace 40)
)

(lookup (this) '(set (this) 'x 10))

(unit-test 'BasicTest
	'(block
		(with (this) '(set 'x 10))
		(check (lookup (this) 'x) == 10)
		
		(with (this) '(set 'x 20))
		(check (lookup (this) 'x) == 20)
	)
)

# 27 August 2010

(struct
	(vector d (int 32))
	
)


(set Marker
	(struct
		(int 32)
		(int 32)
	)
)

(class
	(struct
		(int 32)
		(int 32)
	)
	(list
		start
		length
	)
)

(set m
	(with Marker (new))
)

(with m (getElement 0))

(set (this) 'x (struct (int 32) (int 32) (float 32)))
(set (this) 'y (struct x (int 32)))


(function return-type (argument-types))

(function (void) (int 32) (int 32))

(set (this) 'f
	(compiler 'theMeaningOfLife (function Value) '()
		'(trace 42)
	)
)

union X {
	int x;
	float y;
};

(set (this) 'x (call f '(resolve)))

(head . tail)
(1 (2 (7 (5 nil))))
(1 2 7 5)

(if [conditon]
	[trueClause]
	[falseClause]
)
(union (pointer (int 32)) (float 64))

([function] [arguments...])

#int f (int x) {
#}

(compiler 'f (function (int 32) (int 32)) '(x)

(set (this) 'x
	(compiler 'f (function (int 32)) '()
		'(block
			(var 'x (int 32))
			(call x '(store 100))
			(return (call x '(load)))
		)
	)
)

(set (this) 'meaningOfLife
	(compiler 'meaningOfLife (function (int 32)) '()
		'(block
			(return 42)
		)
	)
)

(call meaningOfLife '(resolve))

(set (this) 'gcd
	(compiler 'gcd (function (int 32) (int 32) (int 32)) '(a b)
		'(block
			(if (== b 0)
				(return a)
				
				(return (gcd b (modulus a b))
			)
		)
	)
)

// Returns the greatest common divisor of a and b.
BigIntT greatestCommonDivisor (BigIntT a, BigIntT b) {
	if (b == 0) {
		return a;
	} else {
		return greatestCommonDivisor(b, a % b);
	}
}

